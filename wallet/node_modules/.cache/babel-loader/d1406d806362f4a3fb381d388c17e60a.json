{"ast":null,"code":"// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport { SET_CURRENCIES, ADD_EXPENSES, SET_EXPENSES, EDIT_EXPENSES } from '../actions';\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  total: 0\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case SET_CURRENCIES:\n      return { ...state,\n        currencies: action.currencies\n      };\n\n    case ADD_EXPENSES:\n      return { ...state,\n        expenses: [...state.expenses, action.expense]\n      };\n\n    case SET_EXPENSES:\n      return { ...state,\n        expenses: action.expenses\n      };\n\n    case EDIT_EXPENSES:\n      return { ...state,\n        eventEdit: action.eventEdit,\n        expense: action.expense\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default wallet;","map":{"version":3,"sources":["/home/neo/Desktop/gitHub/All Projects/Wallet/wallet/src/reducers/wallet.js"],"names":["SET_CURRENCIES","ADD_EXPENSES","SET_EXPENSES","EDIT_EXPENSES","INITIAL_STATE","currencies","expenses","total","wallet","state","action","type","expense","eventEdit"],"mappings":"AAAA;AAEA,SAASA,cAAT,EAAyBC,YAAzB,EAAuCC,YAAvC,EAAqDC,aAArD,QAA0E,YAA1E;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,UAAU,EAAE,EADQ;AAEpBC,EAAAA,QAAQ,EAAE,EAFU;AAGpBC,EAAAA,KAAK,EAAE;AAHa,CAAtB;;AAMA,MAAMC,MAAM,GAAG,CAACC,KAAK,GAAGL,aAAT,EAAwBM,MAAxB,KAAmC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACA,SAAKX,cAAL;AACE,aAAO,EAAE,GAAGS,KAAL;AAAYJ,QAAAA,UAAU,EAAEK,MAAM,CAACL;AAA/B,OAAP;;AACF,SAAKJ,YAAL;AACE,aAAO,EAAE,GAAGQ,KAAL;AAAYH,QAAAA,QAAQ,EAAE,CAAC,GAAGG,KAAK,CAACH,QAAV,EAAoBI,MAAM,CAACE,OAA3B;AAAtB,OAAP;;AACF,SAAKV,YAAL;AACE,aAAO,EAAE,GAAGO,KAAL;AAAYH,QAAAA,QAAQ,EAAEI,MAAM,CAACJ;AAA7B,OAAP;;AACF,SAAKH,aAAL;AACE,aAAO,EAAE,GAAGM,KAAL;AAAYI,QAAAA,SAAS,EAAEH,MAAM,CAACG,SAA9B;AAAyCD,QAAAA,OAAO,EAAEF,MAAM,CAACE;AAAzD,OAAP;;AACF;AACE,aAAOH,KAAP;AAVF;AAYD,CAbD;;AAeA,eAAeD,MAAf","sourcesContent":["// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\n\nimport { SET_CURRENCIES, ADD_EXPENSES, SET_EXPENSES, EDIT_EXPENSES } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  total: 0,\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_CURRENCIES:\n    return { ...state, currencies: action.currencies };\n  case ADD_EXPENSES:\n    return { ...state, expenses: [...state.expenses, action.expense] };\n  case SET_EXPENSES:\n    return { ...state, expenses: action.expenses };\n  case EDIT_EXPENSES:\n    return { ...state, eventEdit: action.eventEdit, expense: action.expense };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n"]},"metadata":{},"sourceType":"module"}