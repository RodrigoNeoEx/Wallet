{"version":3,"sources":["pages/echangeImg.jpg","services/currencyApi.js","actions/index.js","pages/Login.js","components/Header.js","components/ExpensesList.js","components/ExpenseForms.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","a","fetch","response","json","exchangeRates","USDT","fetchCurrency","setExpenses","expenses","type","editExpenses","eventEdit","expense","Login","props","state","email","password","loading","handleChange","bind","validate","clickHandler","target","name","value","this","setState","test","length","checkPassword","checkMail","history","getEmail","setTimeout","push","className","src","logo","alt","placeholder","data-testid","onChange","onClick","disabled","React","Component","connect","dispatch","setEmail","Header","totalExpenses","sum","forEach","expenseValue","currency","ask","toFixed","user","wallet","ExpensesList","btnDelete","btnEdit","expenseid","expensesList","filter","id","editExpense","find","edit","btn","map","index","description","method","tag","key","parseFloat","ExpenseForms","fetchFilteredCurrencies","handleClick","inputNumber","inputText","selectMethod","inputTag","handleExpenseChange","getCurrencies","then","currencies","Object","keys","getExpenses","changeExpense","list","pattern","label","event","currencyInputDropDown","createButton","setCurrencies","addExpenses","Wallet","total","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1aa094b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/echangeImg.21700388.jpg\";","async function fetchCurrency() {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const exchangeRates = await response.json();\n  delete exchangeRates.USDT;\n  return exchangeRates;\n}\n\nexport default fetchCurrency;\n","import fetchCurrency from '../services/currencyApi';\n\nexport const SET_EMAIL = 'GET_EMAIL';\nexport const setEmail = (email) => (\n  { type: SET_EMAIL, email }\n);\n\nexport const SET_CURRENCIES = 'GET_CURRENCIES';\nexport const setCurrencies = (currencies) => (\n  { type: SET_CURRENCIES, currencies }\n);\n\nexport const ADD_EXPENSES = 'ADD_EXPENSES';\nexport const addExpenses = (expense) => (\n  { type: ADD_EXPENSES, expense }\n);\n\nexport const SET_EXPENSES = 'SET_EXPENSES';\nexport const setExpenses = (expenses) => (\n  { type: SET_EXPENSES, expenses }\n);\n\nexport const EDIT_EXPENSES = 'EDIT_EXPENSES';\nexport const editExpenses = (eventEdit, expense) => (\n  { type: EDIT_EXPENSES, eventEdit, expense }\n);\n\nexport const thunk = () => (\n  async (dispatch) => {\n    const result = await fetchCurrency();\n    return dispatch(result);\n  }\n);\n\n// export const Wallet = 'Wallet';\n\n// export const wallet = (currency) => ({ type: Wallet, currency });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { setEmail } from '../actions';\nimport './login.css';\nimport logo from './echangeImg.jpg';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      loading: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.validate = this.validate.bind(this);\n    this.clickHandler = this.clickHandler.bind(this);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  checkMail(email) {\n    const emailRegex = /^([\\w.-]+)@([\\w-]+)((.(\\w){2,3})+)$/;\n    return emailRegex.test(email);\n  }\n\n  checkPassword(password) {\n    const min = 6;\n    if (password.length >= min) {\n      return true;\n    }\n  }\n\n  validate() {\n    const { password, email } = this.state;\n    return this.checkPassword(password) && this.checkMail(email);\n  }\n\n  clickHandler() {\n    const { history, getEmail } = this.props;\n    const { email } = this.state;\n    this.setState({ loading: true });\n    const timer = 2100;\n    getEmail(email);\n    if (this.validate()) setTimeout(() => history.push('/carteira'), timer);\n  }\n\n  render() {\n    const { email, password, loading } = this.state;\n    return (\n      <div className=\"backgroundLogin\">\n        <div className=\"login\">\n          <div className=\"loginBox teste\">\n            <div className=\"inputContainer teste\">\n              {loading ? <img src={ logo } alt=\"logo\" className=\"aniLogo\" />\n                : <img src={ logo } alt=\"logo\" className=\"logo\" /> }\n              <input\n                className=\"email\"\n                placeholder=\"Insert your E-mail\"\n                name=\"email\"\n                type=\"email\"\n                value={ email }\n                data-testid=\"email-input\"\n                onChange={ this.handleChange }\n              />\n              <input\n                className=\"password\"\n                placeholder=\"Insert Password\"\n                name=\"password\"\n                type=\"password\"\n                value={ password }\n                data-testid=\"password-input\"\n                onChange={ this.handleChange }\n              />\n              <button\n                className=\"btn\"\n                type=\"button\"\n                onClick={ this.clickHandler }\n                disabled={ !this.validate() }\n              >\n                Entrar\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  getEmail: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  getEmail: (email) => dispatch(setEmail(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './header.css';\nimport logo from '../pages/echangeImg.jpg';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.totalExpenses = this.totalExpenses.bind(this);\n  }\n\n  totalExpenses() {\n    const { expenses } = this.props;\n    let sum = 0;\n    expenses.forEach((expenseValue) => {\n      sum += expenseValue.value * expenseValue.exchangeRates[expenseValue.currency].ask;\n    });\n    return sum.toFixed(2);\n  }\n\n  render() {\n    const { email } = this.props;\n    return (\n      <header className=\"header\">\n        <img src={ logo } alt=\"logo\" className=\"logo\" />\n        <div className=\"right\">\n          <p data-testid=\"email-field\">\n            { `Bem Vindo ${email}` }\n          </p>\n          <p\n            data-testid=\"total-field\"\n          >\n            { `Total of Expenses $${this.totalExpenses()} `}\n          </p>\n          <p data-testid=\"header-currency-field\">Currency converted to BRL</p>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { AiFillCloseCircle, AiFillEdit } from 'react-icons/ai';\nimport { setExpenses, editExpenses } from '../actions';\nimport './expenseList.css';\n\nclass ExpensesList extends Component {\n  constructor(props) {\n    super(props);\n    this.btnDelete = this.btnDelete.bind(this);\n    this.btnEdit = this.btnEdit.bind(this);\n  }\n\n  btnDelete(expenseid) {\n    const { expenses, expensesList } = this.props;\n    const filter = expenses.filter(({ id }) => id !== expenseid);\n    expensesList(filter);\n  }\n\n  btnEdit(expenseid) {\n    const { editExpense, expenses } = this.props;\n    const expense = expenses.find(({ id }) => id === expenseid);\n\n    editExpense(true, expense);\n  }\n\n  render() {\n    const { expenses } = this.props;\n    const edit = this.btnEdit;\n    const btn = this.btnDelete;\n    return (\n      <table>\n        <thead>\n          <tr className=\"tr\">\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody>\n          {expenses.map((\n            { id, value, description, currency, method, tag, exchangeRates }, index,\n          ) => (\n            <tr key={ index } className=\"tr trTD\">\n              <td>{ description }</td>\n              <td>{ tag }</td>\n              <td>{ method }</td>\n              <td>{ value }</td>\n              <td>{ exchangeRates[currency].name }</td>\n              <td>{ parseFloat(exchangeRates[currency].ask).toFixed(2)}</td>\n              <td>{ (value * exchangeRates[currency].ask).toFixed(2)}</td>\n              <td>Real</td>\n              <td>\n                <button data-testid=\"edit-btn\" type=\"button\" onClick={ () => edit(id) }>\n                  <AiFillEdit className=\"edit\" />\n                </button>\n                <button data-testid=\"delete-btn\" type=\"button\" onClick={ () => btn(id) }>\n                  <AiFillCloseCircle className=\"del\" />\n                </button>\n              </td>\n            </tr>\n          )) }\n        </tbody>\n      </table>\n    );\n  }\n}\n\nExpensesList.propTypes = {\n  expensesList: PropTypes.func.isRequired,\n  editExpense: PropTypes.func.isRequired,\n  expenses: PropTypes.shape({\n    map: PropTypes.func.isRequired,\n    filter: PropTypes.func.isRequired,\n    forEach: PropTypes.func.isRequired,\n    find: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({ expenses: state.wallet.expenses });\n\nconst mapDispatchToProps = (dispatch) => ({\n  expensesList: (expenses) => dispatch(setExpenses(expenses)),\n  editExpense: (eventEdit, expense) => dispatch(editExpenses(eventEdit, expense)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpensesList);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { setCurrencies, addExpenses, editExpenses, setExpenses } from '../actions';\nimport fetchCurrency from '../services/currencyApi';\nimport ExpensesList from './ExpensesList';\nimport './expenseforms.css';\n\nclass ExpenseForms extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0,\n      description: 'Hot Dog',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n    this.fetchFilteredCurrencies = this.fetchFilteredCurrencies.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.inputNumber = this.inputNumber.bind(this);\n    this.inputText = this.inputText.bind(this);\n    this.selectMethod = this.selectMethod.bind(this);\n    this.inputTag = this.inputTag.bind(this);\n    this.handleExpenseChange = this.handleExpenseChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchFilteredCurrencies();\n  }\n\n  fetchFilteredCurrencies() {\n    const { getCurrencies } = this.props;\n    fetchCurrency()\n      .then((currencies) => getCurrencies(Object.keys(currencies)));\n  }\n\n  async handleClick() {\n    const fetch = await fetchCurrency();\n    const { getExpenses, expenses } = this.props;\n    const expense = { id: expenses.length, ...this.state, exchangeRates: fetch };\n    await getExpenses(expense);\n    this.setState({\n      value: 0,\n      description: 'Hot Dog',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    });\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleExpenseChange() {\n    const { expensesList, editExpense, expenses, expense } = this.props;\n    const { id, exchangeRates } = expense;\n    const changeExpense = { ...this.state, id, exchangeRates };\n    const changed = expenses.map((list) => (list.id === id ? changeExpense : list));\n    expensesList(changed);\n    editExpense(false);\n    this.setState({ value: 0,\n      description: 'Hot Dog',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Lazer',\n    });\n  }\n\n  currencyInputDropDown(currencies) {\n    return (\n      <select\n        data-testid=\"currency-input\"\n        onChange={ this.handleChange }\n        name=\"currency\"\n      >\n        { currencies.map((currency) => (\n          <option\n            className=\"option\"\n            key={ currency }\n            data-testid={ currency }\n          >\n            {currency}\n          </option>\n        )) }\n      </select>);\n  }\n\n  inputNumber(value) {\n    return (\n      <input\n        className=\"number\"\n        type=\"number\"\n        data-testid=\"value-input\"\n        onChange={ this.handleChange }\n        name=\"value\"\n        value={ value }\n        pattern=\"^\\d*(\\.\\d{0,2})?$\"\n      />\n    );\n  }\n\n  inputText() {\n    return (\n      <input\n        placeholder=\"Describe activity\"\n        type=\"text\"\n        data-testid=\"description-input\"\n        onChange={ this.handleChange }\n        name=\"description\"\n      />\n    );\n  }\n\n  selectMethod() {\n    return (\n      <select\n        data-testid=\"method-input\"\n        name=\"method\"\n        onChange={ this.handleChange }\n      >\n        <option className=\"option\">Dinheiro</option>\n        <option className=\"option\">Cartão de crédito</option>\n        <option className=\"option\">Cartão de débito</option>\n      </select>\n    );\n  }\n\n  inputTag() {\n    return (\n      <select\n        data-testid=\"tag-input\"\n        name=\"tag\"\n        onChange={ this.handleChange }\n      >\n        <option className=\"option\">Alimentação</option>\n        <option className=\"option\">Lazer</option>\n        <option className=\"option\">Trabalho</option>\n        <option className=\"option\">Transporte</option>\n        <option className=\"option\">Saúde</option>\n      </select>\n    );\n  }\n\n  // href RafaReis\n  createButton(label, event) {\n    return (\n      <button\n        className=\"btnForms\"\n        type=\"button\"\n        onClick={ event }\n      >\n        { label }\n      </button>\n    );\n  }\n\n  render() {\n    const { currencies, eventEdit } = this.props;\n    const { value } = this.state;\n    return (\n      <div className=\"backgroundForms\">\n        <forms className=\"expenseForms\">\n          {this.inputNumber(value)}\n          {this.inputText()}\n          {this.selectMethod()}\n          { currencies && this.currencyInputDropDown(currencies) }\n          {this.inputTag()}\n          { eventEdit ? this.createButton('Editar despesa', this.handleExpenseChange)\n            : this.createButton('Adicionar despesa', this.handleClick) }\n        </forms>\n        <ExpensesList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => (\n  { currencies: state.wallet.currencies,\n    expenses: state.wallet.expenses,\n    eventEdit: state.wallet.eventEdit,\n    expense: state.wallet.expense,\n  });\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrencies: (currencies) => dispatch(setCurrencies(currencies)),\n  getExpenses: (expense) => dispatch(addExpenses(expense)),\n  expensesList: (expenses) => dispatch(setExpenses(expenses)),\n  editExpense: (eventEdit, expense) => dispatch(editExpenses(eventEdit, expense)),\n});\n\nExpenseForms.propTypes = {\n  getCurrencies: PropTypes.func.isRequired,\n  getExpenses: PropTypes.func.isRequired,\n  editExpense: PropTypes.func.isRequired,\n  expensesList: PropTypes.func.isRequired,\n  eventEdit: PropTypes.bool.isRequired,\n  expense: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    exchangeRates: PropTypes.string.isRequired,\n\n  }).isRequired,\n  expenses: PropTypes.shape({\n    length: PropTypes.func.isRequired,\n    forEach: PropTypes.func.isRequired,\n    map: PropTypes.func.isRequired,\n  }).isRequired,\n  currencies: PropTypes.shape.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpenseForms);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { string } from 'prop-types';\nimport Header from '../components/Header';\nimport ExpenseForms from '../components/ExpenseForms';\n\nclass Wallet extends React.Component {\n  render() {\n    const { email, total } = this.props;\n    return (\n      <div>\n        <Header email={ email } total={ total } />\n        <ExpenseForms />\n      </div>\n    );\n  }\n}\n\nWallet.propTypes = {\n  email: string,\n}.isRequired;\n\nconst mapStatetoProps = (state) => ({\n  email: state.user.email,\n  total: state.wallet.total,\n});\n\nexport default connect(mapStatetoProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route exact path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_EMAIL } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_EMAIL:\n    return { ...state, email: action.email };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\n\nimport { SET_CURRENCIES, ADD_EXPENSES, SET_EXPENSES, EDIT_EXPENSES } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  total: 0,\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_CURRENCIES:\n    return { ...state, currencies: action.currencies };\n  case ADD_EXPENSES:\n    return { ...state, expenses: [...state.expenses, action.expense] };\n  case SET_EXPENSES:\n    return { ...state, expenses: action.expenses };\n  case EDIT_EXPENSES:\n    return { ...state, eventEdit: action.eventEdit, expense: action.expense };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}